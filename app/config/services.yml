services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false

    AppBundle\:
        resource: '../../src/AppBundle/*'
        exclude: '../../src/AppBundle/{Entity,Exception,Repository}'

    AppBundle\Command\:
        resource: '../../src/AppBundle/Command'
        tags:
          - { name: console.command }

    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    AppBundle\Cache\CoreApplicationRouterCacheWarmer:
      tags:
        - { name: kernel.cache_warmer, priority: 0 }

    AppBundle\Controller\ExceptionController:
      public: true
      arguments:
        $debug: '%kernel.debug%'

    AppBundle\EventListener\Stripe\Listener:
      tags:
        - { name: kernel.event_listener, event: stripe.customer.subscription.created, method: onCustomerSubscriptionCreated }
        - { name: kernel.event_listener, event: stripe.customer.subscription.deleted, method: onCustomerSubscriptionDeleted }
        - { name: kernel.event_listener, event: stripe.customer.subscription.trial_will_end, method: onCustomerSubscriptionTrialWillEnd }
        - { name: kernel.event_listener, event: stripe.customer.subscription.updated, method: onCustomerSubscriptionUpdated }
        - { name: kernel.event_listener, event: stripe.invoice.payment_succeeded, method: onInvoicePaymentSucceeded }
        - { name: kernel.event_listener, event: stripe.invoice.payment_failed, method: onInvoicePaymentFailed }

    AppBundle\EventListener\MailChimp\Listener:
      tags:
        - { name: kernel.event_listener, event: mailchimp.subscribe, method: onSubscribe }
        - { name: kernel.event_listener, event: mailchimp.unsubscribe, method: onUnsubscribe }
        - { name: kernel.event_listener, event: mailchimp.upemail, method: onUpEmail }
        - { name: kernel.event_listener, event: mailchimp.cleaned, method: onCleaned }

    AppBundle\EventListener\IEFilteredRequestListener:
      arguments:
        $marketingSiteUrl: '%marketing_site%'
      tags:
        - { name: kernel.event_listener, event: kernel.controller, method: onKernelController, priority: 25 }

    AppBundle\EventListener\RequiresValidUserRequestListener:
      tags:
        - { name: kernel.event_listener, event: kernel.controller, method: onKernelController, priority: 24 }

    AppBundle\EventListener\RequiresPrivateUserRequestListener:
      tags:
        - { name: kernel.event_listener, event: kernel.controller, method: onKernelController, priority: 23 }

    AppBundle\EventListener\RequiresValidTestOwnerRequestListener:
      tags:
        - { name: kernel.event_listener, event: kernel.controller, method: onKernelController, priority: 22 }

    AppBundle\EventListener\RequiresCompletedTestRequestListener:
      tags:
        - { name: kernel.event_listener, event: kernel.controller, method: onKernelController, priority: 21 }

    webignition\SimplyTestableUserSerializer\UserSerializer:
      arguments:
        $key: '%kernel.secret%'

    AppBundle\Services\TestOptions\RequestAdapter:
      calls:
        - [addFeatureOptionsParser, ['@AppBundle\Services\TestOptions\OptionsParser']]
        - [addFeatureOptionsParser, ['@AppBundle\Services\TestOptions\CookieOptionsParser', 'cookies']]

    AppBundle\Services\MailChimp\ListRecipientsService:
      arguments:
        $listIdentifiers:
          announcements: '%mailchimp_announcements_list_id%'
          updates: '%mailchimp_updates_list_id%'
          introduction: '%mailchimp_introduction_list_id%'

    AppBundle\Services\TaskTypeService:
      calls:
        - [setTaskTypes, ['%task_types%']]
        - [setEarlyAccessUsers, ['%early_access_users%']]

    AppBundle\Services\CouponService:
      calls:
        - [setCouponData, ['%coupons%']]

    AppBundle\Services\PlansService:
      calls:
        - [setPlansData, ['%plans%']]

    AppBundle\Services\TaskOutput\ResultParser\Factory:
      calls:
        - [addResultParser, ['@AppBundle\Services\TaskOutput\ResultParser\HtmlValidationResultParser']]
        - [addResultParser, ['@AppBundle\Services\TaskOutput\ResultParser\CssValidationResultParser']]
        - [addResultParser, ['@AppBundle\Services\TaskOutput\ResultParser\JsStaticAnalysisResultParser']]
        - [addResultParser, ['@AppBundle\Services\TaskOutput\ResultParser\LinkIntegrityResultParser']]

    AppBundle\Services\CoreApplicationRouter:
      arguments:
        $baseUrl: '%core_url%'
        $kernelProjectDirectory: '%kernel.project_dir%'
        $cacheDir: '%kernel.cache_dir%'

    AppBundle\Services\SystemUserService:
      arguments:
        - '%admin_user_username%'
        - '%admin_user_password%'

    AppBundle\Services\MailChimp\Client:
      arguments:
        $apiKey: '%mailchimp_api_key%'

    Egulias\EmailValidator\EmailValidator:

    GuzzleHttp\Client:
      factory: 'AppBundle\Services\HttpClientFactory:getHttpClient'

    webignition\Guzzle\Middleware\HttpAuthentication\HttpAuthenticationMiddleware:

    Postmark\PostmarkClient:
      arguments:
        - '%postmark_api_key%'

    AppBundle\Services\Pdp\RulesFactory:
      arguments:
        - '%pdp_psl_data_path%'

    AppBundle\Services\Pdp\RulesRetriever:
      arguments:
        - '%pdp_psl_data_path%'
        - '@GuzzleHttp\Client'

    AppBundle\Services\RegisterableDomainService:
      arguments:
        - '@=service("AppBundle\\Services\\Pdp\\RulesFactory").create()'

    AppBundle\Services\Configuration\CssValidationTestConfiguration:
      arguments:
        - '%css-validation-ignore-common-cdns%'

    AppBundle\Services\Configuration\JsStaticAnalysisTestConfiguration:
      arguments:
        - '%js-static-analysis-ignore-common-cdns%'

    AppBundle\Services\Configuration\LinkIntegrityTestConfiguration:
      arguments:
        - '%link-integrity-excluded-domains%'

    AppBundle\Services\Configuration\TestOptionsConfiguration:
      arguments:
        - '%test_options%'

    AppBundle\Services\Configuration\MailConfiguration:
      public: false
      arguments:
        - '%mail%'

    AppBundle\Services\Configuration\StripeConfiguration:
      arguments:
        - '%stripe_publishable_key%'

    AppBundle\Services\Configuration\CurrencyMap:
      arguments:
        - '%currency_map%'

    AppBundle\Services\Configuration\DocumentationSiteUrls:
      arguments:
        - '%documentation_site_urls%'

    AppBundle\Services\Configuration\LinkIntegrityErrorCodeMap:
      arguments:
        - '%link_integrity_error_code_map%'

    AppBundle\Services\DocumentationUrlCheckerService:
      arguments:
        $documentationSitemapPath: '%kernel.project_dir%/app/config/resources/documentation_sitemap.xml'
